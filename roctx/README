This directory has MPI wrappers that are instrumented with roctx
markers.  The idea is to preload the wrapper library for use with
AMD's profiling tools, thus making MPI calls visible in AMD's
tools for visual timeline analysis.  The MPI wrappers also provide
controls for rocmProfilerStart()/rocmProfilerStop(), including support
for time-window profiling.  This makes it possible to selectively
profile a time-window without instrumenting the code.

Requirements : ROCm, mpicc with gcc as the underlying compiler

===============================================================================
Build/Install :

  (1) ./configure --with-rocm=/path/to/rocm
  (2) make libmpitrace.so   

===============================================================================
Typical use :

  (1) export LD_PRELOAD=/path/to/libmpitrace.so
  (2) mpirun -np 1024 ./helper.sh your.exe ...
      where the helper.sh script turns on rocprof for a selected rank
  (3) unset LD_PRELOAD

AMD's rocprof is a very powerful tool for analysis of GPU performance,
but it can be invasive in the context of tightly-coupled MPI parallel
applications.  Instead of launching one instance of rocprof for every
MPI rank, there will be less disruption if rocprof is used selectively
for one specified rank, and a helper script can be used for that.  An
example of helper scripts is shown below for openmpi :

Helper script #1:
    #!/bin/bash
    if [ $OMPI_COMM_WORLD_RANK = 31 ]; then
      if [ -f rocmp.csv ]; then
        mv rocmp.csv rocmp.csv.bak
      fi
      /opt/rocm/bin/rocprof -o rocmp.csv "$@"
    else
     exec "$@"
    fi

Helper script #2:
    #!/bin/bash
    LD_PRELOAD=/path/to/libmpitrace.so your.exe [args]

In this example, rocprof is turned on for MPI rank 31, and profile data
is saved in a file "rocmp.csv", with a backup made for any pre-existing
"rocmp.csv" file.  One could be more specific about naming the rocprof
output, using for example a timestamp or a jobid.

With rocprof it can be advantageous to limit profiling to a specific code
block using rocmProfilerStart()/rocmProfilerStop() or to a specified time
window.  The following illustrates the time-window profiling method, 
where the intent is to capture rocprof data for MPI rank 31 with a start
time of 40 seconds after MPI_Init() and a stop time of 45 seconds after
MPI_Init() :

Job script :
  export PROFILE_RANK=31
  mpirun -np 128 ./helper1.sh ./helper2.sh

Helper script #1:
#!/bin/bash
if [ $OMPI_COMM_WORLD_RANK = $PROFILE_RANK ]; then
  if [ -f rocmp.csv ]; then
    mv rocmp.csv rocmp.csv.bak
  fi
  /opt/rocm/bin/rocprof -o rocmp.csv "$@"
else
 exec "$@"
fi

Helper script #2:
    #!/bin/bash
    LD_PRELOAD=/path/to/libmpitrace.so your.exe [args]

With the time-window profiling method, it is not necessary to instrument
the code with calls to rocmProfilerStart()/rocmProfilerStop(), and in 
in fact source code access is not required at all.  The libmpitrace.so 
library can track the time that has elapsed after MPI_Init() when every 
MPI function is called, and start and stop ROCm profiling as directed
via environment variables.
