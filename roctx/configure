#!/bin/bash 

#parse command arguments
config_args=$(/usr/bin/getopt -n $0 -l "help,with-mpicc:,with-cuda:,with-fortran" -o "hw:c:f:" -- "$@")

if [ $? -ne 0 ]; then
  echo check arguments :  ./configure --help
  exit
fi

eval set -- "$config_args"

cuda_flag=0
mpicc_flag=1
fortran_flag=1

while true 
do
  case "$1" in
    -h|--help)
     echo "configure options :"
     echo "--help  (prints this help message)"
     echo "--with-mpicc=your_mpi_compiler (needed only if your MPI compiler is not mpicc or Cray cc)"
     echo "--with-cuda=/path/to/cuda  (required and must have sub-directories : lib64,include)"
     echo "--with-fortran=[yes|no]  (default is \"yes\", specify \"no\" to wrap only the C interfaces to MPI)"
     exit;;
  
    -w|--with-mpicc)
     mpicc_flag=1
     mpi_compiler="$2"
     if [ ${mpi_compiler:0:2} == -- ]; then
       echo error : optionally specify --with-mpicc=mpi_compiler ... exiting
       exit
     fi
     shift 2;;

    -c|--with-cuda)
     cuda_flag=1
     cuda_path="$2"
     if [ ${cuda_path:0:2} == -- ]; then
       echo error : specify --with-cuda=/path/to/cuda ... exiting
       exit
     fi
     echo using cuda_path=$cuda_path
     shift 2;;

    --)
     shift
     break;;
  esac
done

# if the user specifies --with-mpicc=mpi_compiler, use it, else use mpicc or Cray cc
if [ $mpicc_flag == 1 ]; then
  MPICC=$( command -v $mpi_compiler )
  if [ -z "$MPICC" ]; then
    echo ensure that $mpi_compiler is in your PATH and re-run the configure script ... exiting
    exit
  else
    if [ -x $MPICC ]; then
      echo found MPI C compiler = $MPICC
      compiler=`$mpi_compiler --version | head -n 1 | cut -b 1-3`
      if [ "$compiler" != "gcc" ]; then
        echo please set $mpi_compiler to use gcc as the C compiler and re-run the configure script ... exiting
        exit
      else
       cp makefile.in makefile
       sed -i "s/CC = mpicc/CC = $mpi_compiler/g" makefile
      fi  
    else
      echo ensure that $mpi_compiler is in your PATH and re-run the configure script ... exiting
      exit
    fi  
  fi 
else
  if [ -z ${CRAYPE_VERSION} ]; then
    MPICC=$( command -v mpicc )
    if [ -z "$MPICC" ]; then
      echo ensure that mpicc is in your PATH and re-run the configure script ... exiting
      exit
    elif [ -x $MPICC ]; then
      echo found mpicc = $MPICC
      compiler=$(mpicc --version | head -n 1 | cut -b 1-3)
      if [ "$compiler" != "gcc" ]; then
        echo please set the mpicc command to use gcc as the C compiler and re-run the configure script
        echo example: "export OMPI_CC=gcc; or export MPICH_CC=gcc" ... exiting
        exit
      else
       cp makefile.in makefile
      fi  
    fi  
  else
    CRAYCC=$( command -v cc )
    if [ -x $CRAYCC ]; then
      echo found cc = $CRAYCC
      compiler=$(cc --version | head -n 1 | cut -b 1-3)
      if [ "$compiler" != "gcc" ]; then
        echo please set the cc command to use gcc as the C compiler and re-run the configure script ... exiting
        exit
      else
       cp makefile.in makefile
       sed -i "s/CC = mpicc/CC = cc/g" makefile
      fi
    else
      echo ensure that cc is in your PATH and re-run the configure script ... exiting
      exit
    fi
  fi
fi

#check for inclusion of Fortran MPI profiling entry points
MPICH_CMD=$( command -v mpichversion )
INTELMPI_CMD=$( command -v impi_info )
if [ ! -z "$MPICH_CMD" ]  && [ -x $MPICH_CMD ]; then
  fortran_flag=0;
fi
if [ ! -z "$INTELMPI_CMD" ] && [ -x $INTELMPI_CMD ]; then
  fortran_flag=0;
fi
if [ $fortran_flag == "0" ]; then
  sed -i "s/ FNAME = / FNAME = -DSKIP_FORTRAN/g" makefile
fi

if [ $cuda_flag == 1 ]; then
# check for cuda components
  if [[ ! -z $cuda_path ]]; then
    echo -n testing for libcudart.so...
    if [ -f $cuda_path/lib64/libcudart.so ]; then
      echo found
    else
      echo libcudart.so not found ... check your cuda path ... exiting
      exit
    fi

    echo -n testing for libnvToolsExt.so...
    if [ -f $cuda_path/lib64/libnvToolsExt.so ]; then
      echo found
    else
      echo libnvToolsExt.so not found ... check your cuda path ... exiting
      exit
    fi

    echo -n testing for cuda_profiler_api.h...
    if [ -f $cuda_path/include/cuda_profiler_api.h ]; then
      echo found
    else
      echo cuda_profiler_api.h not found ... check your cuda path ... exiting
      exit
    fi

    echo -n testing for nvToolsExt.h...
    if [ -f $cuda_path/include/nvToolsExt.h ]; then
      echo found
    else
      echo nvToolsExt.h not found ... check your cuda path ... exiting
      exit
    fi

    x_cuda_path="$(echo $cuda_path | sed 's/\//\\\//g')"

    sed -i "s/CUDA_INSTALL_PATH/$x_cuda_path/g" makefile

  else

    echo "error  : the configure option --with-cuda  is required for cuda support"
    echo "example : ./configure --with-cuda=/path/to/cuda"
    exit

  fi

  echo ""
  echo "Edit makefile and ensure that the cuda path is set correctly"
  echo "To build the libmpitrace.so library, type : make libmpitrace.so"
  echo ""
fi

